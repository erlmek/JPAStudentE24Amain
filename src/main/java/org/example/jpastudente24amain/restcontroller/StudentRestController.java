package org.example.jpastudente24amain.restcontroller;

import org.example.jpastudente24amain.JpaStudentE24AmainApplication;
import org.example.jpastudente24amain.model.Student;
import org.example.jpastudente24amain.repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

@RestController
public class StudentRestController {

    @Autowired
    StudentRepository studentRepository;

    @GetMapping("/")
    public String isRoot() {
        return "Du er i roden";
    }

    @GetMapping("/addstudent")
    public List<Student> addstudent() {
        Student std = new Student();
        std.setBornDate(LocalDate.now());
        std.setBornTime(LocalTime.now());
        List<Student> lst = studentRepository.findAll();
        std.setName("Autogenerated sz=" + lst.size());
        studentRepository.save(std);
        JpaStudentE24AmainApplication.logger.info("gemmer i database");
        return studentRepository.findAll();
    }


    @GetMapping("/students")
    public List<Student> students() {
        List<Student> students = studentRepository.findAll();
        return students;
    }

    @PostMapping("/student")
    @ResponseStatus(HttpStatus.CREATED)
    public Student addStudent(@RequestBody Student student) {
        System.out.println(student);
        Student std = studentRepository.save(student);
        return std;
    }

    @PutMapping("/studentx")
    public Student changeStudentx(@RequestBody Student student) {
        System.out.println(student);
        return studentRepository.save(student);
    }

    @PutMapping("/studentxx")
    public Student changeStudentxx(@RequestBody Student student) {
        Optional<Student> orgStudent = studentRepository.findById(student.getId());
        if (orgStudent.isPresent()) {
            return studentRepository.save(student);
        }  else {
            Student newStudent = new Student();
            newStudent.setName("Not Found");
            return newStudent;
        }
    }

    @PutMapping("/studentxy")
    public ResponseEntity<Student> changeStudentxy(@RequestBody Student student) {
        Optional<Student> orgStudent = studentRepository.findById(student.getId());
        if (orgStudent.isPresent()) {
            studentRepository.save(student);
            return ResponseEntity.ok(student);
        }  else {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/student/{id}")
    public ResponseEntity<Student> changeStudent(@PathVariable int id, @RequestBody Student student) {
        Optional<Student> orgStudent = studentRepository.findById(id);
        if (orgStudent.isPresent()) {
            student.setId(orgStudent.get().getId());
            studentRepository.save(student);
            return ResponseEntity.ok(student);
        }  else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/student/{id}")
    public ResponseEntity<String> deleteStudent(@PathVariable int id) {
        Optional<Student> orgStudent = studentRepository.findById(id);
        if (orgStudent.isPresent()) {
            studentRepository.deleteById(id);
            return ResponseEntity.ok("Student deleted successfully");
        }  else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Student not found");
        }
    }



}
